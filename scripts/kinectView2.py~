#!/usr/bin/env python
import sys
import os
import tf
import cv_bridge
import cv2.cv as cv
import cv2
import rospy
import numpy as np
from sensor_msgs.msg import Image
import sensor_msgs.point_cloud2 as pc2
from geometry_msgs.msg import Point
from sensor_msgs.msg import PointCloud2
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

FLOOR = 0
CEILING = 3

class BaxterView(object):
    def __init__(self, numpoints=5):
	print 'at init'
	
	self.Topic = '/camera/depth/points'
	self.cloudy = np.zeros((480,640,4))
	mat = np.meshgrid(np.linspace(0,1,480),np.linspace(0,1,640))
	matt = np.asarray(mat)
	mat = matt[0,:,:]
	mat = np.transpose(mat)
	self.cloudy[:,:,0] = mat/640.0
	self.cloudy[:,:,1] = mat/340.0
	self.cloudy[:,:,2] = mat/140.0
	
        self.numpoints = numpoints
        self.stream = self.data_stream()
        self.angle = 0

        self.fig = plt.figure()
        self.ax = self.fig.add_subplot(111,projection = '3d')
        self.ani = animation.FuncAnimation(self.fig, self.update, interval=100, 
                                           init_func=self.setup_plot, blit=True)

    def change_angle(self):
	return 0
        #self.angle = (self.angle + 1)%360

    def setup_plot(self):
	print 'at setup'      
	X = self.cloudy
        #c = ['b', 'r', 'g', 'y', 'm']
        self.scat = self.ax.scatter(X[:,:,0], X[:,:,1], X[:,:,2], s=10, animated=True)

        self.ax.set_xlim3d(FLOOR, CEILING)
        self.ax.set_ylim3d(FLOOR, CEILING)
        self.ax.set_zlim3d(FLOOR, CEILING)

        return self.scat,

    def data_stream(self):
	print 'at streamz'
        data = np.zeros(( self.numpoints , 3 ))
        xyz = data[:,:3]
        while True:
            xyz += 2 * (np.random.random(( self.numpoints,3)) - 0.5)
            yield data

    def streamR(self):
	print 'at stream'
	rate = rospy.Rate(100)
	depthSub = rospy.Subscriber(self.Topic, PointCloud2, self.callback)
	#print("Displaying. Press Ctrl-C to stop...")
	#while not rospy.is_shutdown():
	#	rate.sleep()

    def callback(self,data):
	print 'at callback'
	self.streamDisp(data)

    def streamDisp(self,data):
	print 'at disp'
	
        #global cloudy,ax,fig
	
	cloudyT = np.fromstring(data.data, dtype=np.float32)
	np.nan_to_num(cloudyT)
	self.cloudy = cloudyT.reshape((480,640,4))
	#print cloudy[0,50,:]
	#print cloudy.shape
	#plot3(cloudy[0][0],cloudy[0][1],cloudy[0][2],"o","r") 
	#ax.scatter(cloudy[:,:,0],cloudy[:,:,1],cloudy[:,:,2],c='r',marker='o')
	#plt.draw()
	#plt.pause(0.5)

    def update(self, i):
	print 'at update'
	self.streamR()
	print 'at update2'
        #data = next(self.stream)
        #data = np.transpose(data)
	data = self.cloudy
        self.scat._offsets3d = ( np.ma.ravel(data[:,:,0]) , np.ma.ravel(data[:,:,1]) , np.ma.ravel(data[:,:,2]) )

        #self.change_angle()
        self.ax.view_init(30,self.angle)
        plt.draw()
        return self.scat,

    def show(self):
	print 'at show'
        plt.show()

if __name__ == '__main__':
    rospy.init_node('kinect_view')
    view = BaxterView()
    view.show()
