#!/usr/bin/env python
import cv_bridge
import cv2.cv as cv
import cv2
import sys
import os
import rospy
import baxter_interface
from std_msgs.msg import String
from sensor_msgs.msg import Image
import argparse
#import roslib
#roslib.load_manifest('my package')

from sensor_msgs.msg import (
    Image,
)
from std_msgs.msg import (
    UInt16,
)

global camera_topic

class imgConv:
	def __init__(self, camera_topic):
		#send
		#self.imagePub = rospy.Publisher("imageTopic2",Image)
		cv2.namedWindow("Image window",1)
		self.bridge = cv_bridge.CvBridge()
		#make sure to use camera node already defined
		self.imageSub = rospy.Subscriber(camera_topic, Image, self.callback)
		
	def callback(self,data):
		try:
			cv_image = self.bridge.imgmsg_to_cv2(data,desired_encoding='bgr8')
		except cv_bridge.CvBridgeError, e:
			print e
		
		(rows, cols, channels) = cv_image.shape
		#turn image grey for processing
		grey = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
		#create haar cascade
		cascPath = "haarcascade_frontalface_default.xml"
		faceCas = cv2.CascadeClassifier(cascPath)
		#detect faces
		sf=4
		faces=faceCas.detectMultiScale(grey,scaleFactor=sf,minNeighbors=1,minSize=(40,40),flags=cv2.cv.CV_HAAR_SCALE_IMAGE)
		if len(faces) > 0:
			print "Found {0} faces...".format(len(faces))
		else: 
			sf=sf+0.1
			print sf
		 	
		for (x,y,w,h) in faces:
			cv2.rectangle(cv_image, (x,y),(x+w, y+h), (0, 255, 0), 2)		
		# display image
		cv2.imshow("Face detect", cv_image)
		cv2.waitKey(2)
		#try:
		#	self.imagePub.publish(self.bridge.cv2_to_imgmsg(cv_image,"bgr8"))
		#except cv_bridge.CvBridgeError, e:
		#	print e
def main(args):
	rospy.init_node('imgConv', anonymous=True)
	#res = (1280,800)
	res = (640,400)
	# define cams
	leftCam = baxter_interface.CameraController("left_hand_camera")
	rightCam = baxter_interface.CameraController("right_hand_camera")
	headCam = baxter_interface.CameraController("head_camera")
	#define argument for command line
	arg_fmt = argparse.RawDescriptionHelpFormatter
	parser = argparse.ArgumentParser(formatter_class=arg_fmt,description=main.__doc__)
	parser.add_argument('-c', '--camera', choices=['left', 'right', 'head'], required=True,help="the camera to display")
	args = parser.parse_args(rospy.myargv()[1:])
	# define camera
	if(args.camera == 'left'):
		leftCam.open()
		leftCam.resolution = res
		camera_topic = '/cameras/left_hand_camera/image'
	if(args.camera == 'right'):
		rightCam.resolution = res
		rightCam.open()
		camera_topic = '/cameras/right_hand_camera/image'
	if(args.camera == 'head'):
		headCam.resolution = res
		headCam.open()
		camera_topic = '/cameras/head_camera/image'

	ic = imgConv(camera_topic)	
	try:
		print("Displaying. Press Ctrl-C to stop...")
		while not rospy.is_shutdown():
			rate.sleep()			
	except KeyboardInterrupt:
		pass
		run = False
	print "shutting down..."
	cv2.destroyAllWindows()
	
if __name__ == '__main__':
	main(sys.argv)
		
		
